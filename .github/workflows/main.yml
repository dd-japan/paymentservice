# This workflow will build and push a new container image to Amazon ECR,
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Login to Amazon ECR Public, then build and push a Docker image

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: b1o7r7e0/paymentservice           # set this to your Amazon ECR repository name

permissions:
  id-token: write
  contents: read

jobs:
  push:
    name: push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: arn:aws:iam::601427279990:role/kishida-oidc-github-actions
        role-session-name: MySessionName

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
          registry-type: public

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Checkout Kubernetes manifests repo
      uses: actions/checkout@v3
      with:
        repository: dd-japan/paymentservice-manifest
        token: ${{ secrets.GH_TOKEN }}
        path: paymentservice-manifest

    - name: List files for debugging
      run: ls -R paymentservice-manifest

    - name: Update Deployment manifests
      run: |
          sed -i 's|image: public.ecr.aws/b1o7r7e0/paymentservice:[^[:space:]]*|image: public.ecr.aws/b1o7r7e0/paymentservice:${{ github.sha }}|g' paymentservice-manifest/manifest/paymentservice.yaml
          cat paymentservice-manifest/manifest/paymentservice.yaml

    - name: Commit and push changes
      working-directory: paymentservice-manifest
      run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add manifest/paymentservice.yaml
          git status
          git commit -m "Update image to public.ecr.aws/b1o7r7e0/paymentservice:${{ env.IMAGE_TAG }}"
          git push origin main
